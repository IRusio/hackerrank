using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the angryProfessor function below.
    static string angryProfessor(int k, int[] a) 
    {
        List<int> studentDestinationTime = a.ToList();
      
        int countOfStudentsOnTime = CanStudentIsOnTime(studentDestinationTime);
        return CanLessonWillHappen(k,countOfStudentsOnTime) == true ? "YES" : "NO";
    }
    
    static int CanStudentIsOnTime(List<int> studentDestinationTime)
    {
        int studentsOnTime = 0;
        foreach(int student in studentDestinationTime)
           studentsOnTime += student>0?0:1;
        
        return studentsOnTime;
    }
    
    static bool CanLessonWillHappen(int minStudentsValue, int studentsOnTime)
    {
        return minStudentsValue <= studentsOnTime ? false : true;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine());

        for (int tItr = 0; tItr < t; tItr++) {
            string[] nk = Console.ReadLine().Split(' ');

            int n = Convert.ToInt32(nk[0]);

            int k = Convert.ToInt32(nk[1]);

            int[] a = Array.ConvertAll(Console.ReadLine().Split(' '), aTemp => Convert.ToInt32(aTemp))
            ;
            string result = angryProfessor(k, a);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
